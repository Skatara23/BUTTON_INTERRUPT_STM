
Interrupt_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000358  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004ec  080004f4  000104f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004ec  080004ec  000104f4  2**0
                  CONTENTS
  4 .ARM          00000000  080004ec  080004ec  000104f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004ec  080004f4  000104f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004ec  080004ec  000104ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004f0  080004f0  000104f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004f4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000104f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000adf  00000000  00000000  00010524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000207  00000000  00000000  00011003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00011210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000058  00000000  00000000  00011280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000db2b  00000000  00000000  000112d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000604  00000000  00000000  0001ee03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f8a0  00000000  00000000  0001f407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006eca7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000010c  00000000  00000000  0006ecf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004d4 	.word	0x080004d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004d4 	.word	0x080004d4

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <EXTI0_IRQHandler>:
#include "stm32f4xx.h"

void EXTI0_IRQHandler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR0) // Check if interrupt flag is set for EXTI Line 0
 800026a:	4b21      	ldr	r3, [pc, #132]	; (80002f0 <EXTI0_IRQHandler+0x8c>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d035      	beq.n	80002e2 <EXTI0_IRQHandler+0x7e>
    {
        // External interrupt code here
        // Your code to handle the interrupt

        EXTI->PR |= EXTI_PR_PR0; // Clear the interrupt flag for EXTI Line 0
 8000276:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <EXTI0_IRQHandler+0x8c>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a1d      	ldr	r2, [pc, #116]	; (80002f0 <EXTI0_IRQHandler+0x8c>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6153      	str	r3, [r2, #20]

        // Toggle LED on GPIOB Pin 5
        GPIOB->ODR ^= (1U << 5);
 8000282:	4b1c      	ldr	r3, [pc, #112]	; (80002f4 <EXTI0_IRQHandler+0x90>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a1b      	ldr	r2, [pc, #108]	; (80002f4 <EXTI0_IRQHandler+0x90>)
 8000288:	f083 0320 	eor.w	r3, r3, #32
 800028c:	6153      	str	r3, [r2, #20]

        // Start PWM on GPIOB Pin 10
        TIM2->CCER |= TIM_CCER_CC3E; // Enable the output
 800028e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000292:	6a1b      	ldr	r3, [r3, #32]
 8000294:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029c:	6213      	str	r3, [r2, #32]
        TIM2->CR1 |= TIM_CR1_CEN;     // Start the timer
 800029e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	6013      	str	r3, [r2, #0]

        for (int i = 0; i < 1000000; i++)
 80002ae:	2300      	movs	r3, #0
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	e002      	b.n	80002ba <EXTI0_IRQHandler+0x56>
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3301      	adds	r3, #1
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <EXTI0_IRQHandler+0x94>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	ddf8      	ble.n	80002b4 <EXTI0_IRQHandler+0x50>
        {
        }

        // Stop PWM after a delay
        TIM2->CCER &= ~TIM_CCER_CC3E; // Disable the output
 80002c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c6:	6a1b      	ldr	r3, [r3, #32]
 80002c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002d0:	6213      	str	r3, [r2, #32]
        TIM2->CR1 &= ~TIM_CR1_CEN;     // Stop the timer
 80002d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002dc:	f023 0301 	bic.w	r3, r3, #1
 80002e0:	6013      	str	r3, [r2, #0]
    }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40013c00 	.word	0x40013c00
 80002f4:	40020400 	.word	0x40020400
 80002f8:	000f423f 	.word	0x000f423f

080002fc <EXTI0_Config>:

void EXTI0_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
    // Enable the GPIOA and GPIOB clocks
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000300:	4b22      	ldr	r3, [pc, #136]	; (800038c <EXTI0_Config+0x90>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4a21      	ldr	r2, [pc, #132]	; (800038c <EXTI0_Config+0x90>)
 8000306:	f043 0303 	orr.w	r3, r3, #3
 800030a:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure GPIOA Pin 0 as input
    GPIOA->MODER &= ~GPIO_MODER_MODER0_Msk;
 800030c:	4b20      	ldr	r3, [pc, #128]	; (8000390 <EXTI0_Config+0x94>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a1f      	ldr	r2, [pc, #124]	; (8000390 <EXTI0_Config+0x94>)
 8000312:	f023 0303 	bic.w	r3, r3, #3
 8000316:	6013      	str	r3, [r2, #0]

    // Configure GPIOB Pin 5 as output (LED)
    GPIOB->MODER |= (1U << 10);
 8000318:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <EXTI0_Config+0x98>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a1d      	ldr	r2, [pc, #116]	; (8000394 <EXTI0_Config+0x98>)
 800031e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000322:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1U << 11);
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <EXTI0_Config+0x98>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a1a      	ldr	r2, [pc, #104]	; (8000394 <EXTI0_Config+0x98>)
 800032a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800032e:	6013      	str	r3, [r2, #0]

    // Enable SYSCFG clock
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000330:	4b16      	ldr	r3, [pc, #88]	; (800038c <EXTI0_Config+0x90>)
 8000332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000334:	4a15      	ldr	r2, [pc, #84]	; (800038c <EXTI0_Config+0x90>)
 8000336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800033a:	6453      	str	r3, [r2, #68]	; 0x44

    // Connect EXTI Line 0 to PA0 pin
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0_Msk;
 800033c:	4b16      	ldr	r3, [pc, #88]	; (8000398 <EXTI0_Config+0x9c>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	4a15      	ldr	r2, [pc, #84]	; (8000398 <EXTI0_Config+0x9c>)
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	6093      	str	r3, [r2, #8]

    // Configure EXTI Line 0
    EXTI->IMR |= EXTI_IMR_MR0;    // Enable interrupt for EXTI Line 0
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <EXTI0_Config+0xa0>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a13      	ldr	r2, [pc, #76]	; (800039c <EXTI0_Config+0xa0>)
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	6013      	str	r3, [r2, #0]
    EXTI->EMR &= ~EXTI_EMR_MR0;   // Disable event for EXTI Line 0
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <EXTI0_Config+0xa0>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	4a10      	ldr	r2, [pc, #64]	; (800039c <EXTI0_Config+0xa0>)
 800035a:	f023 0301 	bic.w	r3, r3, #1
 800035e:	6053      	str	r3, [r2, #4]
    EXTI->RTSR |= EXTI_RTSR_TR0;  // Enable rising edge trigger for EXTI Line 0
 8000360:	4b0e      	ldr	r3, [pc, #56]	; (800039c <EXTI0_Config+0xa0>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	4a0d      	ldr	r2, [pc, #52]	; (800039c <EXTI0_Config+0xa0>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6093      	str	r3, [r2, #8]
    EXTI->FTSR &= ~EXTI_FTSR_TR0; // Disable falling edge trigger for EXTI Line 0
 800036c:	4b0b      	ldr	r3, [pc, #44]	; (800039c <EXTI0_Config+0xa0>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	4a0a      	ldr	r2, [pc, #40]	; (800039c <EXTI0_Config+0xa0>)
 8000372:	f023 0301 	bic.w	r3, r3, #1
 8000376:	60d3      	str	r3, [r2, #12]

    // Enable EXTI Line 0 Interrupt
    NVIC_SetPriority(EXTI0_IRQn, 0x0F);
 8000378:	210f      	movs	r1, #15
 800037a:	2006      	movs	r0, #6
 800037c:	f7ff ff48 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000380:	2006      	movs	r0, #6
 8000382:	f7ff ff27 	bl	80001d4 <__NVIC_EnableIRQ>
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40023800 	.word	0x40023800
 8000390:	40020000 	.word	0x40020000
 8000394:	40020400 	.word	0x40020400
 8000398:	40013800 	.word	0x40013800
 800039c:	40013c00 	.word	0x40013c00

080003a0 <PWM_Config>:

void PWM_Config(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003a4:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <PWM_Config+0x80>)
 80003a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003a8:	4a1d      	ldr	r2, [pc, #116]	; (8000420 <PWM_Config+0x80>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6413      	str	r3, [r2, #64]	; 0x40

    // Configure GPIOB Pin 10 in alternate function mode (AF1) for TIM2_CH3
    GPIOB->MODER |= (1U << 21);
 80003b0:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <PWM_Config+0x84>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a1b      	ldr	r2, [pc, #108]	; (8000424 <PWM_Config+0x84>)
 80003b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003ba:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1U << 20);
 80003bc:	4b19      	ldr	r3, [pc, #100]	; (8000424 <PWM_Config+0x84>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a18      	ldr	r2, [pc, #96]	; (8000424 <PWM_Config+0x84>)
 80003c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003c6:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[1] |= (1U << 8); // AF1 for Pin 10 (TIM2_CH3)
 80003c8:	4b16      	ldr	r3, [pc, #88]	; (8000424 <PWM_Config+0x84>)
 80003ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003cc:	4a15      	ldr	r2, [pc, #84]	; (8000424 <PWM_Config+0x84>)
 80003ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d2:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure TIM2 for PWM generation
    TIM2->PSC = 83; // Assuming a 1 MHz clock (you may need to adjust this based on your system clock)
 80003d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d8:	2253      	movs	r2, #83	; 0x53
 80003da:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 19; // Gives a frequency of 50 kHz (1 MHz / (83 + 1) / (19 + 1) = 50 kHz)
 80003dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e0:	2213      	movs	r2, #19
 80003e2:	62da      	str	r2, [r3, #44]	; 0x2c

    // Configure PWM mode for TIM2_CH3
    TIM2->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2; // PWM Mode 1
 80003e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80003f2:	61d3      	str	r3, [r2, #28]

    // Disable the output initially
    TIM2->CCER &= ~TIM_CCER_CC3E;
 80003f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f8:	6a1b      	ldr	r3, [r3, #32]
 80003fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000402:	6213      	str	r3, [r2, #32]

    // Start the timer
    TIM2->CR1 |= TIM_CR1_CEN;
 8000404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	6013      	str	r3, [r2, #0]
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40023800 	.word	0x40023800
 8000424:	40020400 	.word	0x40020400

08000428 <main>:

int main(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
    // Configure external interrupt
    EXTI0_Config();
 800042c:	f7ff ff66 	bl	80002fc <EXTI0_Config>

    // Configure PWM
    PWM_Config();
 8000430:	f7ff ffb6 	bl	80003a0 <PWM_Config>

    while (1)
 8000434:	e7fe      	b.n	8000434 <main+0xc>
	...

08000438 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000438:	480d      	ldr	r0, [pc, #52]	; (8000470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800043a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800043c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000440:	480c      	ldr	r0, [pc, #48]	; (8000474 <LoopForever+0x6>)
  ldr r1, =_edata
 8000442:	490d      	ldr	r1, [pc, #52]	; (8000478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000444:	4a0d      	ldr	r2, [pc, #52]	; (800047c <LoopForever+0xe>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000448:	e002      	b.n	8000450 <LoopCopyDataInit>

0800044a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800044c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044e:	3304      	adds	r3, #4

08000450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000454:	d3f9      	bcc.n	800044a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000456:	4a0a      	ldr	r2, [pc, #40]	; (8000480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000458:	4c0a      	ldr	r4, [pc, #40]	; (8000484 <LoopForever+0x16>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800045c:	e001      	b.n	8000462 <LoopFillZerobss>

0800045e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000460:	3204      	adds	r2, #4

08000462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000464:	d3fb      	bcc.n	800045e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000466:	f000 f811 	bl	800048c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046a:	f7ff ffdd 	bl	8000428 <main>

0800046e <LoopForever>:

LoopForever:
  b LoopForever
 800046e:	e7fe      	b.n	800046e <LoopForever>
  ldr   r0, =_estack
 8000470:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000478:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800047c:	080004f4 	.word	0x080004f4
  ldr r2, =_sbss
 8000480:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000484:	2000001c 	.word	0x2000001c

08000488 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000488:	e7fe      	b.n	8000488 <ADC_IRQHandler>
	...

0800048c <__libc_init_array>:
 800048c:	b570      	push	{r4, r5, r6, lr}
 800048e:	4d0d      	ldr	r5, [pc, #52]	; (80004c4 <__libc_init_array+0x38>)
 8000490:	4c0d      	ldr	r4, [pc, #52]	; (80004c8 <__libc_init_array+0x3c>)
 8000492:	1b64      	subs	r4, r4, r5
 8000494:	10a4      	asrs	r4, r4, #2
 8000496:	2600      	movs	r6, #0
 8000498:	42a6      	cmp	r6, r4
 800049a:	d109      	bne.n	80004b0 <__libc_init_array+0x24>
 800049c:	4d0b      	ldr	r5, [pc, #44]	; (80004cc <__libc_init_array+0x40>)
 800049e:	4c0c      	ldr	r4, [pc, #48]	; (80004d0 <__libc_init_array+0x44>)
 80004a0:	f000 f818 	bl	80004d4 <_init>
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	10a4      	asrs	r4, r4, #2
 80004a8:	2600      	movs	r6, #0
 80004aa:	42a6      	cmp	r6, r4
 80004ac:	d105      	bne.n	80004ba <__libc_init_array+0x2e>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b4:	4798      	blx	r3
 80004b6:	3601      	adds	r6, #1
 80004b8:	e7ee      	b.n	8000498 <__libc_init_array+0xc>
 80004ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80004be:	4798      	blx	r3
 80004c0:	3601      	adds	r6, #1
 80004c2:	e7f2      	b.n	80004aa <__libc_init_array+0x1e>
 80004c4:	080004ec 	.word	0x080004ec
 80004c8:	080004ec 	.word	0x080004ec
 80004cc:	080004ec 	.word	0x080004ec
 80004d0:	080004f0 	.word	0x080004f0

080004d4 <_init>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	bf00      	nop
 80004d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004da:	bc08      	pop	{r3}
 80004dc:	469e      	mov	lr, r3
 80004de:	4770      	bx	lr

080004e0 <_fini>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr
